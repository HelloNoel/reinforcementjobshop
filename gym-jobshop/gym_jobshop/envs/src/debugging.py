from gym_jobshop.envs.src import environment, global_settings


def verify_machines():
    if global_settings.shop_type == "flow_shop":
        # Raise error if number of orders in any machine exceeds 1
        list_of_machines = environment.list_of_all_machines
        list_of_allowed_product_types = [
            [1, 2, 3, 4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 4], [2, 5], [3, 6]
        ]
        for machine in list_of_machines:
            if len(machine.orders_inside_the_machine) > 1:
                raise ValueError("Too many orders inside machine " + str(machine.name))
            elif len(machine.orders_inside_the_machine) == 1:
                if machine.orders_inside_the_machine[0].product_type not in (
                        list_of_allowed_product_types[list_of_machines.index(machine)]):
                    raise ValueError("step " + str(global_settings.current_time) +
                                     " Wrong product type in machine " + str(machine.name) +
                                     " || product type " + str(machine.orders_inside_the_machine[0].product_type))

                # VERIFICATION FOR JOB SHOP NOT YET IMPLEMENTED TODO
    elif global_settings.shop_type == "flow_shop":
        list_of_machines = environment.list_of_all_machines
        list_of_allowed_product_types = [
            [1, 2, 3, 4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 4], [2, 5], [3, 6]
        ]
    return


def verify_all():
    # The following checks are performed every 50 steps of the simulation
    if global_settings.current_time % 50 == 0:
        verify_machines()


def verify_reset():
    variables_to_check = [
        global_settings.current_time,
        global_settings.sum_fgi_cost, global_settings.total_cost,
        global_settings.sum_shopfloor_cost, global_settings.sum_lateness_cost,
        global_settings.sum_overtime_cost, global_settings.bottleneck_utilization_per_step,
        len(environment.order_pool),
        len(environment.wip_A), len(environment.machine_A.orders_inside_the_machine),

        len(environment.finished_goods_inventory), len(environment.shipped_orders)
    ]
    for variable in variables_to_check:
        if variable != 0:
            raise ValueError("Environment was not correctly reset:", variable)
    if global_settings.shop_type == "job_shop":
        additional_variables_to_check = [len(environment.wip_B), len(environment.machine_B.orders_inside_the_machine),
                                         len(environment.wip_C), len(environment.machine_C.orders_inside_the_machine)]
        for variable in additional_variables_to_check:
            if variable != 0:
                raise ValueError("Environment was not correctly reset:", variable)
    return


def verify_observation_state(state):
    """
    Compare the values of the observation state with the actual numbers from the
    system to identify mistakes.
    :param state: the observation state as generated by main.get_current_environment_state()
    """
    # Verify order pool:
    state_of_order_pool = 0
    for prodtype in range(6):
        state_of_order_pool += sum(state[prodtype][0:10])
    if state_of_order_pool != len(environment.order_pool):
        raise ValueError("Observation state is incorrect - order pool")
    # Verify work centers
    state_of_work_centers = 0
    for prodtype in range(6):
        state_of_work_centers += sum(state[prodtype][10:13])
    actual_numbers_wip = 0
    for wip in environment.list_of_all_wip_elements:
        actual_numbers_wip += len(wip)
    for machine in environment.list_of_all_machines:
        actual_numbers_wip += len(machine.orders_inside_the_machine)
    if state_of_work_centers != actual_numbers_wip:
        raise ValueError("Observation state is incorrect - work centers")
    # Verify FGI
    state_of_fgi = 0
    for prodtype in range(6):
        state_of_fgi += sum(state[prodtype][13:17])
    if state_of_fgi != len(environment.finished_goods_inventory):
        raise ValueError("Observation state is incorrect - FGI")
    # Verify shipped goods
    state_of_shipped_goods = 0
    for prodtype in range(6):
        state_of_shipped_goods += sum(state[prodtype][17:22])
    if state_of_shipped_goods != global_settings.temp_amount_of_shipped_orders:
        raise ValueError("Observation state is incorrect - shipped goods")
    return
